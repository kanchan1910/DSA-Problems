/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void postorder(TreeNode* root, vector<int>& ans)
    {
        if(root == NULL)
        {
            return;
        }
        postorder(root->left, ans);
        postorder(root->right, ans);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root)
    {
        vector<int>ans;
        if(root == NULL)
        {
            return ans;
        }
        postorder(root, ans);
        return ans;
    }
};
// tc o(n)
// sc o(n)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) 
    {
        vector<int>ans;
        if(root == NULL)
        {
            return ans;
        }
        stack<TreeNode*>s;
        TreeNode* cur = root;
        while(cur != NULL || !s.empty())
        {
            if(cur != NULL)
            {
                s.push(cur);
                cur = cur->left;
            }
            else
            {
                TreeNode* tmp = s.top()->right;
                if(tmp == NULL)
                {
                    tmp = s.top();
                    s.pop();
                    ans.push_back(tmp->val);
                    while(!s.empty() && s.top()->right == tmp)
                    {
                        tmp = s.top();
                        s.pop();
                        ans.push_back(tmp->val);
                    }
                }
                else
                {
                    cur = tmp;
                }
            }
        }
        return ans;
    }
};
// tc o(n)
// sc o(n)
