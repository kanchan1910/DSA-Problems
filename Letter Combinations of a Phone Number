https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution {
public:
    unordered_map<int, string>m =
    {
        {2, "abc"},
        {3, "def"},
        {4, "ghi"},
        {5, "jkl"},
        {6, "mno"},
        {7, "pqrs"},
        {8, "tuv"},
        {9, "wxyz"}
    };
    void fun(string& digits, vector<string>& ans, string str, int index, int& n)
    {
        if(index == n)
        {
            ans.push_back(str);
            return;
        }
        for(int i = 0; i < m[digits[index] - '0'].length(); i++)
        {
            str += m[digits[index] - '0'][i];
            fun(digits, ans, str, index + 1, n);
            str.pop_back();
        }
    }
    vector<string> letterCombinations(string digits) 
    {
        vector<string>ans;
        int n = digits.size();
        if(n == 0)
        {
            return ans;
        }
        int index = 0;
        fun(digits, ans, "", index, n);
        return ans;
    }
};
tc o(26^4)
sc o(stack space + map space + string space + vector space)
