int Solution::findMedian(vector<vector<int> > &arr) 
{
    int n = arr.size();
    int m = arr[0].size();
    int l = INT_MAX, r = INT_MIN;
    for(int i = 0; i < n; i++)
    {
        l = min(l, arr[i][0]);
        r = max(r, arr[i][m - 1]);
    }
    int total_size = n * m;
    int ideal_less_than;
    ideal_less_than = (n * m + 1) / 2;
    while(l < r)
    {
        int mid = (l + r) / 2;
        int ele_less_than_equal_to_mid = 0;
        for(int i = 0; i < n; i++)
        {
            ele_less_than_equal_to_mid += upper_bound(arr[i].begin(), arr[i].end(), mid) - arr[i].begin();
        }
        if(ele_less_than_equal_to_mid < ideal_less_than)
        {
            l = mid + 1;
        }
        else
        {
            r = mid;
        }
    }
    return r;
}
// keep this example in mid
// 1 1 1 3 3
// 1 2 2 2 2 2 3 3 3 3 3
// tc o(nlogm * log(max))
// sc o(1)
