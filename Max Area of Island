class Solution {
public:
    void dfs(vector<vector<int>>& grid, int n, int m, int& count, int i, int j)
    {
        if(i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 0 || grid[i][j] == -1)
        {
            return;
        }
        grid[i][j] = -1;
        count++;
        dfs(grid, n, m, count, i + 1, j);
        dfs(grid, n, m, count, i - 1, j);
        dfs(grid, n, m, count, i, j - 1);
        dfs(grid, n, m, count, i, j + 1);
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        int max_area = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1)
                {
                    int count = 0;
                    dfs(grid, n, m, count, i, j);
                    max_area = max(max_area, count);
                }
            }
        }
        return max_area;
    }
};
// tc o(n * m)
// sc o(1)
