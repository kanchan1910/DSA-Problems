/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) 
    {
        if(root == NULL)
        {
            return NULL;
        }
        queue<Node*>q;
        q.push(root);
        Node* prev = NULL;
        while(!q.empty())
        {
            prev = NULL;
            int sz = q.size();
            Node* front;
            for(int i = 0; i < sz; i++)
            {
                front = q.front();
                q.pop();
                if(prev != NULL)
                {
                    prev->next = front; 
                }
                prev = front;
                if(front->left != NULL)
                {
                    q.push(front->left);
                }
                
                if(front->right != NULL)
                {
                    q.push(front->right);
                }
            }
            front->next = NULL;
        }
        return root;
    }
};
// tc o(n)
// sc o(n)
