vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int>dis(V, INT_MAX);
        dis[S] = 0;
        vector<int>vis(V, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>pq;
        pq.push({dis[S],S});
        while(!pq.empty())
        {
            pair<int, int>p = pq.top();
            pq.pop();
            int node = p.second;
            int d = p.first;
            if(vis[node] == true)
            {
                continue;
            }
            vis[node] = true;
            for(auto childvector: adj[node])
            {
                
                int child = childvector[0];
                int weight = childvector[1];
                if(!vis[child] && dis[child] > dis[node] + weight)
                {
                    dis[child] = dis[node] + weight;
                    pq.push({dis[child], child});
                }
            }
        }
        return dis;
    }
