class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        int fresh = 0;
        queue<pair<int, int>>q;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 2)
                {
                    q.push({i, j});
                }
                if(grid[i][j] == 1)
                {
                    fresh++;
                }
            }
        }
        int ans = 0;
        while(!q.empty())
        {
            int sz = q.size();
            for(int i = 0; i < sz; i++)
            {
                pair<int, int>p = q.front();
                q.pop();
                int x = p.first;
                int y = p.second;
                if(x - 1 >= 0 && grid[x - 1][y] == 1)
                {
                    q.push({x - 1, y});
                    fresh--;
                    grid[x - 1][y] = 2;
                }
                if(y - 1 >= 0 && grid[x][y - 1] == 1)
                {
                    q.push({x, y - 1});
                    fresh--;
                    grid[x][y - 1] = 2;
                }
                if(x + 1 <= n - 1 && grid[x + 1][y] == 1)
                {
                    q.push({x + 1, y});
                    fresh--;
                    grid[x + 1][y] = 2;
                }
                if(y + 1 <= m - 1 && grid[x][y + 1] == 1)
                {
                    q.push({x, y + 1});
                    fresh--;
                    grid[x][y + 1] = 2;
                }
            }
            if(q.size() > 0)
            {
                ans++;
            }
        }
        return fresh == 0 ? ans : -1;
    }
};


// tc o(n * m)
// sc o(n * m)
