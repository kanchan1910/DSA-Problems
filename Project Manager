https://practice.geeksforgeeks.org/problems/6b216f3d1f1ce9a14258b982d44f5e5199e7759a/1#
// variation of topological sort

int minTime(vector<pair<int, int>> &dependency, int duration[], int n, int m) 
    {
        vector<int>adj[n];
        vector<int>indegree(n, 0);
        for(int i = 0; i < m; i++)
        {
            adj[dependency[i].first].push_back(dependency[i].second);
            indegree[dependency[i].second]++; 
        }
        queue<int>q;
        vector<int>ans(n, 0);
        for(int i = 0; i < n; i++)
        {
            if(indegree[i] == 0)
            {
                q.push(i);
            }
            ans[i] = duration[i];
        }
        int count = 0;
        while(!q.empty())
        {
            int front = q.front();
            q.pop();
            count++;
            for(auto child: adj[front])
            {
                
                indegree[child]--;
                if(indegree[child] == 0)
                {
                    q.push(child);
                }
                ans[child] = max(ans[child], duration[child] + ans[front]);
            }
        }
        return count == n  ? *max_element(ans.begin(), ans.end()) : -1;
    }
    tc o(n + m)
    sc o(n)
