/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>>ans;
        if(root == NULL)
        {
            return ans;
        }
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            vector<int>tmp;
            int sz = q.size();
            for(int i = 0; i < sz; i++)
            {
                TreeNode* front = q.front();
                q.pop();
                tmp.push_back(front->val);
                if(front->left != NULL)
                {
                    q.push(front->left);
                }
                if(front->right != NULL)
                {
                    q.push(front->right);
                }
            }
            ans.push_back(tmp);
        }
        return ans;
    }
};
// tc o(n)
// sc o(n)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void fun(TreeNode* root, map<int, vector<int>>& m, int level)
    {
        if(root == NULL)
        {
            return;
        }
        m[level].push_back(root->val);
        fun(root->left, m, level + 1);
        fun(root->right, m, level + 1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>>ans;
        if(root == NULL)
        {
            return ans;
        }
        map<int, vector<int>>m;
        fun(root, m, 0);
        for(auto x: m)
        {
            ans.push_back(x.second);
        }
        return ans;
    }
};
// tc o(n)
// sc o(n)
