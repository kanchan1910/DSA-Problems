class Solution {
public:
    void fun(vector<vector<int>>& image, int n, int m, int oldColor, int newColor, int i, int j)
    {
        if(i < 0 || j < 0 || i >= n || j >= m || image[i][j] != oldColor)
        {
            return;
        }
        image[i][j] = newColor;
        fun(image, n, m, oldColor, newColor, i + 1, j);
        fun(image, n, m, oldColor, newColor, i - 1, j);
        fun(image, n, m, oldColor, newColor, i, j + 1);
        fun(image, n, m, oldColor, newColor, i, j - 1);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor)     {
        int n = image.size();
        int m = image[0].size();
        int oldColor = image[sr][sc];
        if(oldColor == newColor)
        {
            newColor = -1;
        }
        fun(image, n, m, oldColor, newColor, sr, sc);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(image[i][j] == -1)
                {
                    image[i][j] = oldColor;
                }
            }
        }
        return image;
    }
};
// tc o(n * m)
// sc o(1)
