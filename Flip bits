  int maxOnes(int a[], int n)
    {
        vector<int>arr(n);
        int count = 0;
        for(int i = 0; i < n; i++)
        {
            if(a[i] == 0)
            {
                arr[i] = 1;
            }
            else
            {
                count++;
                arr[i] = -1;
            }
        }
        int cur_sum = arr[0], max_sum = arr[0];
        int l = 0, r = 0;
        for(int i = 1; i < n; i++)
        {
            cur_sum = max(cur_sum + arr[i], arr[i]);
            max_sum = max(max_sum, cur_sum);
        }
        cur_sum = 0;
        unordered_map<int, int>m;
        for(int i = 0; i < n; i++)
        {
            cur_sum += arr[i];
            if(cur_sum == max_sum)
            {
                l = 0; 
                r = i;
            }
            if(m.find(cur_sum - max_sum) != m.end())
            {
                l = m[cur_sum - max_sum] + 1;
                r = i;
            }
            m[cur_sum] = i;
        }
        // cout << max_sum << " " << l << " " << r << endl;
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            if(i >= l && i <= r)
            {
                a[i] = a[i] ^ 1;
            }
            if(a[i] == 1)
            {
                ans++;
            }
        }
        // for the case of all ones
        return max(ans, count);
    }
    // tc o(n)
    // sc o(n)
