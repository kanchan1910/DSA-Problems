class Solution {
public:
    int fun(int n, vector<int>& dp)
    {
        // base cases
        if(n < 0)
        {
            // no path possible
            return 0;
        }
        if(n == 0)
        {
            return 1;
        }
        if(dp[n] != -1)
        {
            return dp[n];
        }
        return dp[n] = fun(n - 1, dp) + fun(n - 2, dp);
    }
    int climbStairs(int n) 
    {
        vector<int>dp(n + 1, -1);
        return fun(n, dp);
    }
};


// recursion + memoization
// tc o(n) 
// sc o(n)

// tabulation

class Solution {
public:
    
    int climbStairs(int n) 
    {
        vector<int>dp(n + 1, -1);
        dp[1] = 1;
        if(n == 1)
        {
            return dp[1];
        }
        dp[2] = 2;
        for(int i = 3; i <= n; i++)
        {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
};
// tc o(n) 
// sc o(n)


     
