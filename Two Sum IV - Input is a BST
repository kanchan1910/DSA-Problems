/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& tmp)
    {
        if(root == NULL)
        {
            return;
        }
        inorder(root->left, tmp);
        tmp.push_back(root->val);
        inorder(root->right, tmp);
    }
    bool findTarget(TreeNode* root, int k) 
    {
        if(root == NULL)
        {
            return false;
        }
        vector<int>tmp;
        inorder(root, tmp);
        int l = 0, r = tmp.size() - 1;
        while(l < r)
        {
            int sum = tmp[l] + tmp[r];
            if(sum == k)
            {
                return true;
            }
            else if(sum < k)
            {
                l++;
            }
            else if(sum > k)
            {
                r--;
            }
        }
        return false;
    }
};
// tc o(n)
// sc o(n)

====================================================================================================================================================================
class Solution {
public:
    
    bool findTarget(TreeNode* root, int k) 
    {
        if(root == NULL)
        {
            return false;
        }
        TreeNode* cur1 = root;
        TreeNode* cur2 = root;
        stack<TreeNode*>s1, s2;
        while(true)
        {
            while(cur1 != NULL)
            {
                s1.push(cur1);
                cur1 = cur1->left;
            }
            while(cur2 != NULL)
            {
                s2.push(cur2);
                cur2 = cur2->right;
            }
            if(s1.empty() || s2.empty())
            {
                return false;
            }
            cur1 = s1.top();
            cur2 = s2.top();
            if(cur1 == cur2)
            {
                return false;
            }
            int sum = cur1->val + cur2->val;
            if(sum == k)
            {
                return true;
            }
            else if(sum < k)
            {
                s1.pop();
                cur1 = cur1->right;
                cur2 = NULL;
            }
            else if(sum > k)
            {
                s2.pop();
                cur2 = cur2->left;
                cur1 = NULL;
            }
        }
        return false;
    }
};
// tc o(n)
// sc o(h)
