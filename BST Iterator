/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

stack<TreeNode*>s;
void find_left(TreeNode* root)
{
    while(root != NULL)
    {
        s.push(root);
        root = root->left;
    }
}
BSTIterator::BSTIterator(TreeNode *root)
{
    find_left(root);
}

/** @return whether we have a next smallest number */
bool BSTIterator::hasNext() 
{
    return s.size() == 0 ? false : true;
}

/** @return the next smallest number */
int BSTIterator::next() 
{
    if(hasNext() == true)
    {
        TreeNode* cur = s.top();
        TreeNode* ans = cur;
        s.pop();
        cur = cur->right;
        find_left(cur);
        return ans->val;
    }
    return -1;
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */

sc o(h)
tc o(h) for next function, o(1) for hasNext function
