/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(TreeNode* root, vector<int>& ans)
    {
        if(root == NULL)
        {
            return;
        }
        ans.push_back(root->val);
        preorder(root->left, ans);
        preorder(root->right, ans);
    }
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int>ans;
        if(root == NULL)
        {
            return ans;
        }
        preorder(root, ans);
        return ans;
    }
};
// tc o(n) 
// sc o(n)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int>ans;
        if(root == NULL)
        {
            return ans;
        }
        stack<TreeNode*>s;
        s.push(root);
        while(!s.empty())
        {
            TreeNode* tmp = s.top();
            ans.push_back(tmp->val);
            s.pop();
            if(tmp->right != NULL)
            {
                s.push(tmp->right);
            }
            if(tmp->left != NULL)
            {
                s.push(tmp->left);
            }
        }
        return ans;
    }
};

// tc o(n)
// sc o(h)
