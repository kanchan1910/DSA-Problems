
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        if(l1 == NULL && l2 == NULL)
        {
            return NULL;
        }
        if(l1 == NULL)
        {
            return l2;
        }
        if(l2 == NULL)
        {
            return l1;
        }
        ListNode* ans;
        if(l1->val <= l2->val)
        {
            ans = l1;
            ans->next = mergeTwoLists(l1->next, l2);
        }
        else
        {
            ans = l2;
            ans->next = mergeTwoLists(l1, l2->next);
        }
        return ans;
    }
};
// tc o(n + m)
// sc o(recursive space)


class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        if(l1 == NULL && l2 == NULL)
        {
            return NULL;
        }
        if(l1 == NULL)
        {
            return l2;
        }
        if(l2 == NULL)
        {
            return l1;
        }
        ListNode* dummy = new ListNode(0);
        ListNode* tmp = dummy;
        while(l1 != NULL && l2 != NULL)
        {
            if(l1->val <= l2->val)
            {
                tmp->next = l1;
                tmp = tmp->next;
                l1 = l1->next;
            }
            else
            {
                tmp->next = l2;
                tmp = tmp->next;
                l2 = l2->next;
            }
        }
        while(l1 != NULL)
        {
            tmp->next = l1;
            tmp = tmp->next;
            l1 = l1->next;
        }
        
        while(l2 != NULL)
        {
            tmp->next = l2;
            tmp = tmp->next;
            l2 = l2->next;
        }
        return dummy->next;
    }
};
// tc o(n + m)
// sc o(1)
